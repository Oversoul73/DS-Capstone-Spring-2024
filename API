•••••••••FAST API••••••••••••

Q: WHAT IS FASTAPI?
FastAPI is a modern, high-performance web framework for building APIs with Python. It is designed to be fast, simple, and easy to use, leveraging Python type hints for automatic data validation and documentation generation. FastAPI is built on top of Starlette for the web parts and Pydantic for the data parts, making it a powerful tool for building asynchronous web applications and APIs.
Q: WHY FASTAPI OVER FLASK?
FastAPI offers better performance and automatic documentation generation based on Python type hints, enhancing developer productivity and code reliability, making it a preferred choice over Flask for building high-performance APIs with built-in documentation support. Additionally, FastAPI leverages asynchronous programming patterns, enabling efficient handling of concurrent requests and real-time applications, which may be advantageous over Flask for projects requiring high scalability and responsiveness.

•The steps for FASTAPI I followed :-
To install FastAPI, I have used pip, the Python package manager. Additionally, I need an ASGI server like Uvicorn to run the FastAPI application.
1.Install FastAPI and Uvicorn:
pip install fastapi uvicorn
2.Creating a FastAPI Application:
from fastapi import FastAPI
from pydantic import BaseModel
app = FastAPI()
class Item(BaseModel):
    name: str
    price: float
@app.post("/items/")
async def create_item(item: Item):
    return {"name": item.name, "price": item.price}
3.Running the FastAPI Application:
uvicorn main:app --reload


•CODE :- 
from fastapi import FastAPI, HTTPException
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Initialize FastAPI
app = FastAPI()

# Database Connection
SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Define a model
class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, index=True)

# Create database tables
Base.metadata.create_all(bind=engine)

# Dependency for getting a database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
